differences <- diff(differences)
degree <- degree + 1
# Check if the differences are constant
if (all(differences == differences[1])) {
return(degree)
}
}
return(degree) # If all differences reduce to a single constant value
}
# Example usage
sequence <- c(1, 4, 9, 16, 25)  # Quadratic sequence: f(n) = n^2
cat("Degree of the polynomial:", find_polynomial_degree(sequence), "\n")
sequence <- c(1, 8, 9, 64, 125)  # Cubic sequence: f(n) = n^3 + linear term
cat("Degree of the polynomial:", find_polynomial_degree(sequence), "\n")
seq3 <- rep(2,50)
find_polynomial_degree(seq3)
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
find_polynomial_degree <- function(x) {
if(!is.sequence(x) || !is.numeric(x))
stop("Vector must be an object of class 'Sequence' or 'numeric'")
# Check if the input sequence is valid
if (length(x) < 2) {
stop("Sequence must have at least two elements.")
}
differences <- x
degree <- 1
while (length(differences) > 1) {
# Calculate consecutive differences
differences <- diff(differences)
degree <- degree + 1
# Check if the differences are constant
if (all(differences == differences[1])) {
return(degree)
}
}
return(degree) # If all differences reduce to a single constant value
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
find_polynomial_degree <- function(x) {
if(!is.sequence(x) || !is.numeric(x))
stop("Vector must be an object of class 'Sequence' or 'numeric'")
# Check if the input sequence is valid
if (length(x) < 2) {
stop("Sequence must have at least two elements.")
}
if(all_the_same(x)){
return(degree = 0)
}
differences <- x
degree <- 1
while (length(differences) > 1) {
# Calculate consecutive differences
differences <- diff(differences)
degree <- degree + 1
# Check if the differences are constant
if (all(differences == differences[1])) {
return(degree)
}
}
return(degree) # If all differences reduce to a single constant value
}
find_polynomial_degree(seq3)
is.numeric(seq3)
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
join_char <- function(first,
join_with = "_",
second){
stopifnot(is.character(first),
is.character(second))
new_string <- paste0(first,join_with,second)
return(new_string)
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
get_mode <- function(.x) {
.x <- unique(.x)
x_not_na <- .x[which(!is.na(.x))]
if(length(x_not_na) > 0) {
tab <- tabulate(match(.x, x_not_na))
candidates <- x_not_na[tab == max(tab)]
if (is.logical(.x)) {
any(candidates) # return TRUE if any true. max returns an integer
} else {
max(candidates) # return highest (ie max) value
}
} else {
.x[NA_integer_]
}
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
is.sequence <- function(x,...){
if(!inherits(x,"Sequence"))FALSE
else {
TRUE
}
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
all_different <- function(x){
length(unique(x)) == length(x)
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
all_the_same <- function(x){
if(is.numeric(x)){
return(max(x,na.rm = TRUE) == min(x,na.rm = TRUE) && !anyNA(x))
}
if (!is.list(x)) {
return(length(unique(x)) == 1)
}
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
are_equal = function(x, y,
check.names = TRUE,
check.attributes = TRUE,
...) {
test = all.equal(target = x,
current = y,
check.names = check.names,
check.attributes = check.attributes,
...)
if (is.logical(test)) {
return(TRUE)
} else {
return(FALSE)
}
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
join_char <- function(first,
join_with = "_",
second){
stopifnot(is.character(first),
is.character(second))
new_string <- paste0(first,join_with,second)
return(new_string)
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
get_mode <- function(.x) {
.x <- unique(.x)
x_not_na <- .x[which(!is.na(.x))]
if(length(x_not_na) > 0) {
tab <- tabulate(match(.x, x_not_na))
candidates <- x_not_na[tab == max(tab)]
if (is.logical(.x)) {
any(candidates) # return TRUE if any true. max returns an integer
} else {
max(candidates) # return highest (ie max) value
}
} else {
.x[NA_integer_]
}
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
is.sequence <- function(x,...){
if(!inherits(x,"Sequence"))FALSE
else {
TRUE
}
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
all_different <- function(x){
length(unique(x)) == length(x)
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
all_the_same <- function(x){
if(is.numeric(x)){
return(max(x,na.rm = TRUE) == min(x,na.rm = TRUE) && !anyNA(x))
}
if (!is.list(x)) {
return(length(unique(x)) == 1)
}
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
are_equal = function(x, y,
check.names = TRUE,
check.attributes = TRUE,
...) {
test = all.equal(target = x,
current = y,
check.names = check.names,
check.attributes = check.attributes,
...)
if (is.logical(test)) {
return(TRUE)
} else {
return(FALSE)
}
}is.sequence(seq3) || is.numeric(seq3)
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
join_char <- function(first,
join_with = "_",
second){
stopifnot(is.character(first),
is.character(second))
new_string <- paste0(first,join_with,second)
return(new_string)
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
get_mode <- function(.x) {
.x <- unique(.x)
x_not_na <- .x[which(!is.na(.x))]
if(length(x_not_na) > 0) {
tab <- tabulate(match(.x, x_not_na))
candidates <- x_not_na[tab == max(tab)]
if (is.logical(.x)) {
any(candidates) # return TRUE if any true. max returns an integer
} else {
max(candidates) # return highest (ie max) value
}
} else {
.x[NA_integer_]
}
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
is.sequence <- function(x,...){
if(!inherits(x,"Sequence"))FALSE
else {
TRUE
}
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
all_different <- function(x){
length(unique(x)) == length(x)
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
all_the_same <- function(x){
if(is.numeric(x)){
return(max(x,na.rm = TRUE) == min(x,na.rm = TRUE) && !anyNA(x))
}
if (!is.list(x)) {
return(length(unique(x)) == 1)
}
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
are_equal = function(x, y,
check.names = TRUE,
check.attributes = TRUE,
...) {
test = all.equal(target = x,
current = y,
check.names = check.names,
check.attributes = check.attributes,
...)
if (is.logical(test)) {
return(TRUE)
} else {
return(FALSE)
}
}
is.sequence(seq3) || is.numeric(seq3)
!is.sequence(seq3) || is.numeric(seq3)
!is.sequence(seq3) || !is.numeric(seq3)
is.sequence(seq3) || !is.numeric(seq3)
`||`
?`||`
find_polynomial_degree(seq3)
is.sequence(seq3)
seq_smooth(1,15,25)
seq_smooth(1,15,25) -> seq2
is.numeric(seq2)
is.sequence(seq2)
length(seq3)
all_the_same(seq3)
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
find_polynomial_degree <- function(x) {
if(!is.numeric(x))
stop("Vector must be an object of class 'Sequence' or 'numeric'")
# Check if the input sequence is valid
if (length(x) < 2) {
stop("Sequence must have at least two elements.")
}
if(all_the_same(x)){
return(degree = 0)
}
differences <- x
degree <- 1
while (length(differences) > 1) {
# Calculate consecutive differences
differences <- diff(differences)
degree <- degree + 1
# Check if the differences are constant
if (all_the_same(differences)) {
return(degree)
}
}
return(degree) # If all differences reduce to a single constant value
}
find_polynomial_degree(seq3)
find_polynomial_degree(seq2)
while (length(seq2) > 1) {
# Calculate consecutive differences
differences <- diff(seq2)
degree <- 1 + 1
# Check if the differences are constant
if (all_the_same(differences)) {
return(degree)
}
}
find_polynomial_degree(seq2)
seq2
# Example usage
sequence1 <- c(1, 4, 9, 16, 25)  # Quadratic: n^2
sequence2 <- c(2, 5, 10, 17, 26) # Cubic with a linear term
sequence3 <- c(3, 3, 3, 3, 3)    # Constant sequence
find_polynomial_degree(sequence1)  # Output: 2
find_polynomial_degree(sequence2)  # Output: 3
find_polynomial_degree(sequence3)  # Output: 0
seq4 <- seq_smooth(1,50,100,type = "quint","in")
find_polynomial_degree(seq4)
.Machine$double.eps
.Machine$double.eps^.5
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
all_the_same <- function(x, tol = 1e-10){
if(is.numeric(x)){
return(max(x,na.rm = TRUE) - min(x,na.rm = TRUE) < tol  && !anyNA(x))
}
if (!is.list(x)) {
return(length(unique(x)) == 1)
}
}
find_polynomial_degree(seq4)
find_polynomial_degree(seq2)
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
find_polynomial_degree <- function(x) {
if(!is.numeric(x))
stop("Vector must be an object of class 'Sequence' or 'numeric'")
# Check if the input sequence is valid
if (length(x) < 2) {
stop("Sequence must have at least two elements.")
}
if (all_the_same(x)) {
return(0)  # Constant sequence
}
differences <- x
degree <- 0
while (length(differences) > 1) {
differences <- diff(differences)
# Check if the differences are constant
if (all_the_same(differences)) {
return(degree)
}
degree <- degree + 1
}
return(degree) # If all differences reduce to a single constant value
}
find_polynomial_degree(seq2)
find_polynomial_degree(seq4)
seq4
seq4@type
diff(diff(diff(diff(diff(seq4)))))
unique(diff(diff(diff(diff(diff(seq4))))))
all.equal(diff(diff(diff(diff(diff(seq4))))),diff(diff(diff(diff(diff(seq4))))), tol = 1e-10)
all_the_same(diff(diff(diff(diff(diff(seq4))))))
find_polynomial_degree <- function(x) {
if (!is.numeric(x)) stop("Input must be a numeric vector.")
if (length(x) < 2) stop("Sequence must have at least two elements.")
if (all_the_same(x)) return(0)
differences <- x
degree <- 1
while (length(differences) > 1) {
differences <- diff(differences)
cat("Degree:", degree, "| Differences:", differences, "\n") # Debug output
if (all_the_same(differences)) {
return(degree)
}
degree <- degree + 1
}
return(degree)
}
find_polynomial_degree(seq4)
.Machine$double.eps^.5
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
all_the_same <- function(x, tol = 1e-9){
if(is.numeric(x)){
return(max(x,na.rm = TRUE) - min(x,na.rm = TRUE) < tol  && !anyNA(x))
}
if (!is.list(x)) {
return(length(unique(x)) == 1)
}
}
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
find_polynomial_degree <- function(x) {
if(!is.numeric(x))
stop("Vector must be an object of class 'Sequence' or 'numeric'")
# Check if the input sequence is valid
if (length(x) < 2) {
stop("Sequence must have at least two elements.")
}
if (all_the_same(x)) {
return(0)  # Constant sequence
}
differences <- x
degree <- 0
while (length(differences) > 1) {
differences <- diff(differences)
# Check if the differences are constant
if (all_the_same(differences)) {
return(degree)
}
degree <- degree + 1
}
return(degree) # If all differences reduce to a single constant value
}
find_polynomial_degree(seq4)
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
all_the_same <- function(x, tol = 1e-10){
if(is.numeric(x)){
return(max(x,na.rm = TRUE) - min(x,na.rm = TRUE) < tol  && !anyNA(x))
}
if (!is.list(x)) {
return(length(unique(x)) == 1)
}
}
find_polynomial_degree(seq4)
find_polynomial_degree <- function(x) {
if (!is.numeric(x)) stop("Input must be a numeric vector.")
if (length(x) < 2) stop("Sequence must have at least two elements.")
if (all_the_same(x)) return(0)
differences <- x
degree <- 1
while (length(differences) > 1) {
differences <- diff(differences)
cat("Degree:", degree, "| Differences:", unique(differences), "\n") # Debug output
if (all_the_same(differences)) {
return(degree)
}
degree <- degree + 1
}
return(degree)
}
find_polynomial_degree(seq4)
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
find_polynomial_degree <- function(x) {
if(!is.numeric(x))
stop("Vector must be an object of class 'Sequence' or 'numeric'")
# Check if the input sequence is valid
if (length(x) < 2) {
stop("Sequence must have at least two elements.")
}
if (all_the_same(x)) {
return(0)  # Constant sequence
}
differences <- x
degree <- 1
while (length(differences) > 1) {
differences <- diff(differences)
# Check if the differences are constant
if (all_the_same(differences)) {
return(degree)
}
degree <- degree + 1
}
return(degree) # If all differences reduce to a single constant value
}
find_polynomial_degree(seq4)
find_polynomial_degree(seq2)
unique(seq3)
#---- --- ---- --- ---- --- ---- --- ---- --- ---- --- ----#
iterate_diff <- function(x) {
stopifnot(is.numeric(x))
if(length(x) < 2)
stop("Sequence must have at least two elements.")
if (all_the_same(x)) {
return(x)  # Constant sequence
}
degree <- find_polynomial_degree(x)
# Compute differences 'degree' number of times
current_sequence <- x
for (i in seq_len(degree)) {
current_sequence <- diff(current_sequence)
}
return(current_sequence)
}
iterate_diff(seq4)
plot(iterate_diff(seq4))
plot.new()
plot.window(c(1:length(seq4)),range(seq4))
plot.window(c(1,length(seq4)),range(seq4))
points(interate_diff(seq4),pch = 16, col = "red",cex = .85)
points(iterate_diff(seq4),pch = 16, col = "red",cex = .85)
plot.new()
x <- iterate_diff(seq4)
plot.window(c(1,length(seq4)),range(x))
points(iterate_diff(seq4),pch = 16, col = "red",cex = .85)
axis(1,tcl = 0.75,lwd = 0, family = "serif")
axis(2,lwd = 0, family = "serif", las = 1)
?ticks
?tick
?axisTicks
plot.new()
plot.window(c(1,length(seq4)),range(x))
points(iterate_diff(seq4),pch = 16, col = "red",cex = .85)
axis(1,tcl = 0.75,lwd = 0, family = "serif")
axis(2,lwd = 0, at = round(x,digits = 5), family = "serif", las = 1)
axis(1,tcl = 0.75,lwd = 0, family = "serif")
axis(2,lwd = 0, at = round(summary(x),digits = 5), family = "serif", las = 1)
axis(1,tcl = 0.75,lwd = 0, family = "serif")
axis(2,lwd = 0, family = "serif", las = 2)
plot(seq_smooth(1,15,50,"circle","in"))
plot(seq_smooth(-1,-15,50,"circle","in"))
plot(seq_smooth(-1,-15,50,"circle","out"))
plot(seq_smooth(1,15,50,"circle","out"))
plot(seq_smooth(-1,15,50,"circle","out"))
plot(seq_smooth(-1,-15,50,"circle","out"))
sign(seq4)
mean(seq4)
which(diff(seq4 - mean(seq4)) != 0)
plot(seq4[which(diff(seq4 - mean(seq4)) != 0)])
seq5 <- seq_smooth(1,50,50,"sine","in")
plot(seq5[which(diff(seq5 - mean(seq5)) != 0)])
seq5[which(diff(seq5 - mean(seq5)) != 0)]
sign(seq5)
length(sign(seq5))
?sign
diff(seq5 - mean(seq5))
